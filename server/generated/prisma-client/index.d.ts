// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  asset: (where?: AssetWhereInput) => Promise<boolean>;
  tag: (where?: TagWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  asset: (where: AssetWhereUniqueInput) => AssetNullablePromise;
  assets: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Asset>;
  assetsConnection: (args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssetConnectionPromise;
  tag: (where: TagWhereUniqueInput) => TagNullablePromise;
  tags: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Tag>;
  tagsConnection: (args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TagConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAsset: (data: AssetCreateInput) => AssetPromise;
  updateAsset: (args: {
    data: AssetUpdateInput;
    where: AssetWhereUniqueInput;
  }) => AssetPromise;
  updateManyAssets: (args: {
    data: AssetUpdateManyMutationInput;
    where?: AssetWhereInput;
  }) => BatchPayloadPromise;
  upsertAsset: (args: {
    where: AssetWhereUniqueInput;
    create: AssetCreateInput;
    update: AssetUpdateInput;
  }) => AssetPromise;
  deleteAsset: (where: AssetWhereUniqueInput) => AssetPromise;
  deleteManyAssets: (where?: AssetWhereInput) => BatchPayloadPromise;
  createTag: (data: TagCreateInput) => TagPromise;
  updateTag: (args: {
    data: TagUpdateInput;
    where: TagWhereUniqueInput;
  }) => TagPromise;
  updateManyTags: (args: {
    data: TagUpdateManyMutationInput;
    where?: TagWhereInput;
  }) => BatchPayloadPromise;
  upsertTag: (args: {
    where: TagWhereUniqueInput;
    create: TagCreateInput;
    update: TagUpdateInput;
  }) => TagPromise;
  deleteTag: (where: TagWhereUniqueInput) => TagPromise;
  deleteManyTags: (where?: TagWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  asset: (
    where?: AssetSubscriptionWhereInput
  ) => AssetSubscriptionPayloadSubscription;
  tag: (
    where?: TagSubscriptionWhereInput
  ) => TagSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TagOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "tagName_ASC"
  | "tagName_DESC";

export type AssetOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "partNumber_ASC"
  | "partNumber_DESC"
  | "partName_ASC"
  | "partName_DESC"
  | "assetNumber_ASC"
  | "assetNumber_DESC"
  | "assetName_ASC"
  | "assetName_DESC"
  | "stockQuantity_ASC"
  | "stockQuantity_DESC"
  | "outQuantity_ASC"
  | "outQuantity_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "middleName_ASC"
  | "middleName_DESC"
  | "contactNumber_ASC"
  | "contactNumber_DESC"
  | "loginSecret_ASC"
  | "loginSecret_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AssetWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  partNumber?: Maybe<String>;
}>;

export interface TagWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tagName?: Maybe<String>;
  tagName_not?: Maybe<String>;
  tagName_in?: Maybe<String[] | String>;
  tagName_not_in?: Maybe<String[] | String>;
  tagName_lt?: Maybe<String>;
  tagName_lte?: Maybe<String>;
  tagName_gt?: Maybe<String>;
  tagName_gte?: Maybe<String>;
  tagName_contains?: Maybe<String>;
  tagName_not_contains?: Maybe<String>;
  tagName_starts_with?: Maybe<String>;
  tagName_not_starts_with?: Maybe<String>;
  tagName_ends_with?: Maybe<String>;
  tagName_not_ends_with?: Maybe<String>;
  asset_every?: Maybe<AssetWhereInput>;
  asset_some?: Maybe<AssetWhereInput>;
  asset_none?: Maybe<AssetWhereInput>;
  AND?: Maybe<TagWhereInput[] | TagWhereInput>;
  OR?: Maybe<TagWhereInput[] | TagWhereInput>;
  NOT?: Maybe<TagWhereInput[] | TagWhereInput>;
}

export interface AssetWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  partNumber?: Maybe<String>;
  partNumber_not?: Maybe<String>;
  partNumber_in?: Maybe<String[] | String>;
  partNumber_not_in?: Maybe<String[] | String>;
  partNumber_lt?: Maybe<String>;
  partNumber_lte?: Maybe<String>;
  partNumber_gt?: Maybe<String>;
  partNumber_gte?: Maybe<String>;
  partNumber_contains?: Maybe<String>;
  partNumber_not_contains?: Maybe<String>;
  partNumber_starts_with?: Maybe<String>;
  partNumber_not_starts_with?: Maybe<String>;
  partNumber_ends_with?: Maybe<String>;
  partNumber_not_ends_with?: Maybe<String>;
  partName?: Maybe<String>;
  partName_not?: Maybe<String>;
  partName_in?: Maybe<String[] | String>;
  partName_not_in?: Maybe<String[] | String>;
  partName_lt?: Maybe<String>;
  partName_lte?: Maybe<String>;
  partName_gt?: Maybe<String>;
  partName_gte?: Maybe<String>;
  partName_contains?: Maybe<String>;
  partName_not_contains?: Maybe<String>;
  partName_starts_with?: Maybe<String>;
  partName_not_starts_with?: Maybe<String>;
  partName_ends_with?: Maybe<String>;
  partName_not_ends_with?: Maybe<String>;
  assetNumber?: Maybe<String>;
  assetNumber_not?: Maybe<String>;
  assetNumber_in?: Maybe<String[] | String>;
  assetNumber_not_in?: Maybe<String[] | String>;
  assetNumber_lt?: Maybe<String>;
  assetNumber_lte?: Maybe<String>;
  assetNumber_gt?: Maybe<String>;
  assetNumber_gte?: Maybe<String>;
  assetNumber_contains?: Maybe<String>;
  assetNumber_not_contains?: Maybe<String>;
  assetNumber_starts_with?: Maybe<String>;
  assetNumber_not_starts_with?: Maybe<String>;
  assetNumber_ends_with?: Maybe<String>;
  assetNumber_not_ends_with?: Maybe<String>;
  assetName?: Maybe<String>;
  assetName_not?: Maybe<String>;
  assetName_in?: Maybe<String[] | String>;
  assetName_not_in?: Maybe<String[] | String>;
  assetName_lt?: Maybe<String>;
  assetName_lte?: Maybe<String>;
  assetName_gt?: Maybe<String>;
  assetName_gte?: Maybe<String>;
  assetName_contains?: Maybe<String>;
  assetName_not_contains?: Maybe<String>;
  assetName_starts_with?: Maybe<String>;
  assetName_not_starts_with?: Maybe<String>;
  assetName_ends_with?: Maybe<String>;
  assetName_not_ends_with?: Maybe<String>;
  stockQuantity?: Maybe<Int>;
  stockQuantity_not?: Maybe<Int>;
  stockQuantity_in?: Maybe<Int[] | Int>;
  stockQuantity_not_in?: Maybe<Int[] | Int>;
  stockQuantity_lt?: Maybe<Int>;
  stockQuantity_lte?: Maybe<Int>;
  stockQuantity_gt?: Maybe<Int>;
  stockQuantity_gte?: Maybe<Int>;
  outQuantity?: Maybe<Int>;
  outQuantity_not?: Maybe<Int>;
  outQuantity_in?: Maybe<Int[] | Int>;
  outQuantity_not_in?: Maybe<Int[] | Int>;
  outQuantity_lt?: Maybe<Int>;
  outQuantity_lte?: Maybe<Int>;
  outQuantity_gt?: Maybe<Int>;
  outQuantity_gte?: Maybe<Int>;
  tag_every?: Maybe<TagWhereInput>;
  tag_some?: Maybe<TagWhereInput>;
  tag_none?: Maybe<TagWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  OR?: Maybe<AssetWhereInput[] | AssetWhereInput>;
  NOT?: Maybe<AssetWhereInput[] | AssetWhereInput>;
}

export type TagWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  tagName?: Maybe<String>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  middleName?: Maybe<String>;
  middleName_not?: Maybe<String>;
  middleName_in?: Maybe<String[] | String>;
  middleName_not_in?: Maybe<String[] | String>;
  middleName_lt?: Maybe<String>;
  middleName_lte?: Maybe<String>;
  middleName_gt?: Maybe<String>;
  middleName_gte?: Maybe<String>;
  middleName_contains?: Maybe<String>;
  middleName_not_contains?: Maybe<String>;
  middleName_starts_with?: Maybe<String>;
  middleName_not_starts_with?: Maybe<String>;
  middleName_ends_with?: Maybe<String>;
  middleName_not_ends_with?: Maybe<String>;
  contactNumber?: Maybe<String>;
  contactNumber_not?: Maybe<String>;
  contactNumber_in?: Maybe<String[] | String>;
  contactNumber_not_in?: Maybe<String[] | String>;
  contactNumber_lt?: Maybe<String>;
  contactNumber_lte?: Maybe<String>;
  contactNumber_gt?: Maybe<String>;
  contactNumber_gte?: Maybe<String>;
  contactNumber_contains?: Maybe<String>;
  contactNumber_not_contains?: Maybe<String>;
  contactNumber_starts_with?: Maybe<String>;
  contactNumber_not_starts_with?: Maybe<String>;
  contactNumber_ends_with?: Maybe<String>;
  contactNumber_not_ends_with?: Maybe<String>;
  loginSecret?: Maybe<String>;
  loginSecret_not?: Maybe<String>;
  loginSecret_in?: Maybe<String[] | String>;
  loginSecret_not_in?: Maybe<String[] | String>;
  loginSecret_lt?: Maybe<String>;
  loginSecret_lte?: Maybe<String>;
  loginSecret_gt?: Maybe<String>;
  loginSecret_gte?: Maybe<String>;
  loginSecret_contains?: Maybe<String>;
  loginSecret_not_contains?: Maybe<String>;
  loginSecret_starts_with?: Maybe<String>;
  loginSecret_not_starts_with?: Maybe<String>;
  loginSecret_ends_with?: Maybe<String>;
  loginSecret_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface AssetCreateInput {
  id?: Maybe<ID_Input>;
  partNumber: String;
  partName: String;
  assetNumber: String;
  assetName: String;
  stockQuantity: Int;
  outQuantity?: Maybe<Int>;
  tag?: Maybe<TagCreateManyWithoutAssetInput>;
}

export interface TagCreateManyWithoutAssetInput {
  create?: Maybe<TagCreateWithoutAssetInput[] | TagCreateWithoutAssetInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
}

export interface TagCreateWithoutAssetInput {
  id?: Maybe<ID_Input>;
  tagName: String;
}

export interface AssetUpdateInput {
  partNumber?: Maybe<String>;
  partName?: Maybe<String>;
  assetNumber?: Maybe<String>;
  assetName?: Maybe<String>;
  stockQuantity?: Maybe<Int>;
  outQuantity?: Maybe<Int>;
  tag?: Maybe<TagUpdateManyWithoutAssetInput>;
}

export interface TagUpdateManyWithoutAssetInput {
  create?: Maybe<TagCreateWithoutAssetInput[] | TagCreateWithoutAssetInput>;
  delete?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  connect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  set?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  disconnect?: Maybe<TagWhereUniqueInput[] | TagWhereUniqueInput>;
  update?: Maybe<
    | TagUpdateWithWhereUniqueWithoutAssetInput[]
    | TagUpdateWithWhereUniqueWithoutAssetInput
  >;
  upsert?: Maybe<
    | TagUpsertWithWhereUniqueWithoutAssetInput[]
    | TagUpsertWithWhereUniqueWithoutAssetInput
  >;
  deleteMany?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  updateMany?: Maybe<
    TagUpdateManyWithWhereNestedInput[] | TagUpdateManyWithWhereNestedInput
  >;
}

export interface TagUpdateWithWhereUniqueWithoutAssetInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutAssetDataInput;
}

export interface TagUpdateWithoutAssetDataInput {
  tagName?: Maybe<String>;
}

export interface TagUpsertWithWhereUniqueWithoutAssetInput {
  where: TagWhereUniqueInput;
  update: TagUpdateWithoutAssetDataInput;
  create: TagCreateWithoutAssetInput;
}

export interface TagScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  tagName?: Maybe<String>;
  tagName_not?: Maybe<String>;
  tagName_in?: Maybe<String[] | String>;
  tagName_not_in?: Maybe<String[] | String>;
  tagName_lt?: Maybe<String>;
  tagName_lte?: Maybe<String>;
  tagName_gt?: Maybe<String>;
  tagName_gte?: Maybe<String>;
  tagName_contains?: Maybe<String>;
  tagName_not_contains?: Maybe<String>;
  tagName_starts_with?: Maybe<String>;
  tagName_not_starts_with?: Maybe<String>;
  tagName_ends_with?: Maybe<String>;
  tagName_not_ends_with?: Maybe<String>;
  AND?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  OR?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
  NOT?: Maybe<TagScalarWhereInput[] | TagScalarWhereInput>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateManyDataInput {
  tagName?: Maybe<String>;
}

export interface AssetUpdateManyMutationInput {
  partNumber?: Maybe<String>;
  partName?: Maybe<String>;
  assetNumber?: Maybe<String>;
  assetName?: Maybe<String>;
  stockQuantity?: Maybe<Int>;
  outQuantity?: Maybe<Int>;
}

export interface TagCreateInput {
  id?: Maybe<ID_Input>;
  tagName: String;
  asset?: Maybe<AssetCreateManyWithoutTagInput>;
}

export interface AssetCreateManyWithoutTagInput {
  create?: Maybe<AssetCreateWithoutTagInput[] | AssetCreateWithoutTagInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
}

export interface AssetCreateWithoutTagInput {
  id?: Maybe<ID_Input>;
  partNumber: String;
  partName: String;
  assetNumber: String;
  assetName: String;
  stockQuantity: Int;
  outQuantity?: Maybe<Int>;
}

export interface TagUpdateInput {
  tagName?: Maybe<String>;
  asset?: Maybe<AssetUpdateManyWithoutTagInput>;
}

export interface AssetUpdateManyWithoutTagInput {
  create?: Maybe<AssetCreateWithoutTagInput[] | AssetCreateWithoutTagInput>;
  delete?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  connect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  set?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  disconnect?: Maybe<AssetWhereUniqueInput[] | AssetWhereUniqueInput>;
  update?: Maybe<
    | AssetUpdateWithWhereUniqueWithoutTagInput[]
    | AssetUpdateWithWhereUniqueWithoutTagInput
  >;
  upsert?: Maybe<
    | AssetUpsertWithWhereUniqueWithoutTagInput[]
    | AssetUpsertWithWhereUniqueWithoutTagInput
  >;
  deleteMany?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  updateMany?: Maybe<
    AssetUpdateManyWithWhereNestedInput[] | AssetUpdateManyWithWhereNestedInput
  >;
}

export interface AssetUpdateWithWhereUniqueWithoutTagInput {
  where: AssetWhereUniqueInput;
  data: AssetUpdateWithoutTagDataInput;
}

export interface AssetUpdateWithoutTagDataInput {
  partNumber?: Maybe<String>;
  partName?: Maybe<String>;
  assetNumber?: Maybe<String>;
  assetName?: Maybe<String>;
  stockQuantity?: Maybe<Int>;
  outQuantity?: Maybe<Int>;
}

export interface AssetUpsertWithWhereUniqueWithoutTagInput {
  where: AssetWhereUniqueInput;
  update: AssetUpdateWithoutTagDataInput;
  create: AssetCreateWithoutTagInput;
}

export interface AssetScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  partNumber?: Maybe<String>;
  partNumber_not?: Maybe<String>;
  partNumber_in?: Maybe<String[] | String>;
  partNumber_not_in?: Maybe<String[] | String>;
  partNumber_lt?: Maybe<String>;
  partNumber_lte?: Maybe<String>;
  partNumber_gt?: Maybe<String>;
  partNumber_gte?: Maybe<String>;
  partNumber_contains?: Maybe<String>;
  partNumber_not_contains?: Maybe<String>;
  partNumber_starts_with?: Maybe<String>;
  partNumber_not_starts_with?: Maybe<String>;
  partNumber_ends_with?: Maybe<String>;
  partNumber_not_ends_with?: Maybe<String>;
  partName?: Maybe<String>;
  partName_not?: Maybe<String>;
  partName_in?: Maybe<String[] | String>;
  partName_not_in?: Maybe<String[] | String>;
  partName_lt?: Maybe<String>;
  partName_lte?: Maybe<String>;
  partName_gt?: Maybe<String>;
  partName_gte?: Maybe<String>;
  partName_contains?: Maybe<String>;
  partName_not_contains?: Maybe<String>;
  partName_starts_with?: Maybe<String>;
  partName_not_starts_with?: Maybe<String>;
  partName_ends_with?: Maybe<String>;
  partName_not_ends_with?: Maybe<String>;
  assetNumber?: Maybe<String>;
  assetNumber_not?: Maybe<String>;
  assetNumber_in?: Maybe<String[] | String>;
  assetNumber_not_in?: Maybe<String[] | String>;
  assetNumber_lt?: Maybe<String>;
  assetNumber_lte?: Maybe<String>;
  assetNumber_gt?: Maybe<String>;
  assetNumber_gte?: Maybe<String>;
  assetNumber_contains?: Maybe<String>;
  assetNumber_not_contains?: Maybe<String>;
  assetNumber_starts_with?: Maybe<String>;
  assetNumber_not_starts_with?: Maybe<String>;
  assetNumber_ends_with?: Maybe<String>;
  assetNumber_not_ends_with?: Maybe<String>;
  assetName?: Maybe<String>;
  assetName_not?: Maybe<String>;
  assetName_in?: Maybe<String[] | String>;
  assetName_not_in?: Maybe<String[] | String>;
  assetName_lt?: Maybe<String>;
  assetName_lte?: Maybe<String>;
  assetName_gt?: Maybe<String>;
  assetName_gte?: Maybe<String>;
  assetName_contains?: Maybe<String>;
  assetName_not_contains?: Maybe<String>;
  assetName_starts_with?: Maybe<String>;
  assetName_not_starts_with?: Maybe<String>;
  assetName_ends_with?: Maybe<String>;
  assetName_not_ends_with?: Maybe<String>;
  stockQuantity?: Maybe<Int>;
  stockQuantity_not?: Maybe<Int>;
  stockQuantity_in?: Maybe<Int[] | Int>;
  stockQuantity_not_in?: Maybe<Int[] | Int>;
  stockQuantity_lt?: Maybe<Int>;
  stockQuantity_lte?: Maybe<Int>;
  stockQuantity_gt?: Maybe<Int>;
  stockQuantity_gte?: Maybe<Int>;
  outQuantity?: Maybe<Int>;
  outQuantity_not?: Maybe<Int>;
  outQuantity_in?: Maybe<Int[] | Int>;
  outQuantity_not_in?: Maybe<Int[] | Int>;
  outQuantity_lt?: Maybe<Int>;
  outQuantity_lte?: Maybe<Int>;
  outQuantity_gt?: Maybe<Int>;
  outQuantity_gte?: Maybe<Int>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  OR?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
  NOT?: Maybe<AssetScalarWhereInput[] | AssetScalarWhereInput>;
}

export interface AssetUpdateManyWithWhereNestedInput {
  where: AssetScalarWhereInput;
  data: AssetUpdateManyDataInput;
}

export interface AssetUpdateManyDataInput {
  partNumber?: Maybe<String>;
  partName?: Maybe<String>;
  assetNumber?: Maybe<String>;
  assetName?: Maybe<String>;
  stockQuantity?: Maybe<Int>;
  outQuantity?: Maybe<Int>;
}

export interface TagUpdateManyMutationInput {
  tagName?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  firstName: String;
  lastName: String;
  middleName?: Maybe<String>;
  contactNumber?: Maybe<String>;
  loginSecret: String;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  middleName?: Maybe<String>;
  contactNumber?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  middleName?: Maybe<String>;
  contactNumber?: Maybe<String>;
  loginSecret?: Maybe<String>;
}

export interface AssetSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssetWhereInput>;
  AND?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  OR?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
  NOT?: Maybe<AssetSubscriptionWhereInput[] | AssetSubscriptionWhereInput>;
}

export interface TagSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TagWhereInput>;
  AND?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  OR?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
  NOT?: Maybe<TagSubscriptionWhereInput[] | TagSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Asset {
  id: ID_Output;
  partNumber: String;
  partName: String;
  assetNumber: String;
  assetName: String;
  stockQuantity: Int;
  outQuantity: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AssetPromise extends Promise<Asset>, Fragmentable {
  id: () => Promise<ID_Output>;
  partNumber: () => Promise<String>;
  partName: () => Promise<String>;
  assetNumber: () => Promise<String>;
  assetName: () => Promise<String>;
  stockQuantity: () => Promise<Int>;
  outQuantity: () => Promise<Int>;
  tag: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AssetSubscription
  extends Promise<AsyncIterator<Asset>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  partNumber: () => Promise<AsyncIterator<String>>;
  partName: () => Promise<AsyncIterator<String>>;
  assetNumber: () => Promise<AsyncIterator<String>>;
  assetName: () => Promise<AsyncIterator<String>>;
  stockQuantity: () => Promise<AsyncIterator<Int>>;
  outQuantity: () => Promise<AsyncIterator<Int>>;
  tag: <T = Promise<AsyncIterator<TagSubscription>>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AssetNullablePromise
  extends Promise<Asset | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  partNumber: () => Promise<String>;
  partName: () => Promise<String>;
  assetNumber: () => Promise<String>;
  assetName: () => Promise<String>;
  stockQuantity: () => Promise<Int>;
  outQuantity: () => Promise<Int>;
  tag: <T = FragmentableArray<Tag>>(args?: {
    where?: TagWhereInput;
    orderBy?: TagOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Tag {
  id: ID_Output;
  tagName: String;
}

export interface TagPromise extends Promise<Tag>, Fragmentable {
  id: () => Promise<ID_Output>;
  tagName: () => Promise<String>;
  asset: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagSubscription
  extends Promise<AsyncIterator<Tag>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tagName: () => Promise<AsyncIterator<String>>;
  asset: <T = Promise<AsyncIterator<AssetSubscription>>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TagNullablePromise extends Promise<Tag | null>, Fragmentable {
  id: () => Promise<ID_Output>;
  tagName: () => Promise<String>;
  asset: <T = FragmentableArray<Asset>>(args?: {
    where?: AssetWhereInput;
    orderBy?: AssetOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AssetConnection {
  pageInfo: PageInfo;
  edges: AssetEdge[];
}

export interface AssetConnectionPromise
  extends Promise<AssetConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssetEdge>>() => T;
  aggregate: <T = AggregateAssetPromise>() => T;
}

export interface AssetConnectionSubscription
  extends Promise<AsyncIterator<AssetConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssetEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssetSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AssetEdge {
  node: Asset;
  cursor: String;
}

export interface AssetEdgePromise extends Promise<AssetEdge>, Fragmentable {
  node: <T = AssetPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssetEdgeSubscription
  extends Promise<AsyncIterator<AssetEdge>>,
    Fragmentable {
  node: <T = AssetSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAsset {
  count: Int;
}

export interface AggregateAssetPromise
  extends Promise<AggregateAsset>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssetSubscription
  extends Promise<AsyncIterator<AggregateAsset>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TagConnection {
  pageInfo: PageInfo;
  edges: TagEdge[];
}

export interface TagConnectionPromise
  extends Promise<TagConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TagEdge>>() => T;
  aggregate: <T = AggregateTagPromise>() => T;
}

export interface TagConnectionSubscription
  extends Promise<AsyncIterator<TagConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TagEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTagSubscription>() => T;
}

export interface TagEdge {
  node: Tag;
  cursor: String;
}

export interface TagEdgePromise extends Promise<TagEdge>, Fragmentable {
  node: <T = TagPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TagEdgeSubscription
  extends Promise<AsyncIterator<TagEdge>>,
    Fragmentable {
  node: <T = TagSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTag {
  count: Int;
}

export interface AggregateTagPromise
  extends Promise<AggregateTag>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTagSubscription
  extends Promise<AsyncIterator<AggregateTag>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  email: String;
  firstName: String;
  lastName: String;
  middleName?: String;
  contactNumber?: String;
  loginSecret: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  middleName: () => Promise<String>;
  contactNumber: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  contactNumber: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  middleName: () => Promise<String>;
  contactNumber: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AssetSubscriptionPayload {
  mutation: MutationType;
  node: Asset;
  updatedFields: String[];
  previousValues: AssetPreviousValues;
}

export interface AssetSubscriptionPayloadPromise
  extends Promise<AssetSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssetPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssetPreviousValuesPromise>() => T;
}

export interface AssetSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssetSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssetSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssetPreviousValuesSubscription>() => T;
}

export interface AssetPreviousValues {
  id: ID_Output;
  partNumber: String;
  partName: String;
  assetNumber: String;
  assetName: String;
  stockQuantity: Int;
  outQuantity: Int;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface AssetPreviousValuesPromise
  extends Promise<AssetPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  partNumber: () => Promise<String>;
  partName: () => Promise<String>;
  assetNumber: () => Promise<String>;
  assetName: () => Promise<String>;
  stockQuantity: () => Promise<Int>;
  outQuantity: () => Promise<Int>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface AssetPreviousValuesSubscription
  extends Promise<AsyncIterator<AssetPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  partNumber: () => Promise<AsyncIterator<String>>;
  partName: () => Promise<AsyncIterator<String>>;
  assetNumber: () => Promise<AsyncIterator<String>>;
  assetName: () => Promise<AsyncIterator<String>>;
  stockQuantity: () => Promise<AsyncIterator<Int>>;
  outQuantity: () => Promise<AsyncIterator<Int>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface TagSubscriptionPayload {
  mutation: MutationType;
  node: Tag;
  updatedFields: String[];
  previousValues: TagPreviousValues;
}

export interface TagSubscriptionPayloadPromise
  extends Promise<TagSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TagPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TagPreviousValuesPromise>() => T;
}

export interface TagSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TagSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TagSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TagPreviousValuesSubscription>() => T;
}

export interface TagPreviousValues {
  id: ID_Output;
  tagName: String;
}

export interface TagPreviousValuesPromise
  extends Promise<TagPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  tagName: () => Promise<String>;
}

export interface TagPreviousValuesSubscription
  extends Promise<AsyncIterator<TagPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  tagName: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  firstName: String;
  lastName: String;
  middleName?: String;
  contactNumber?: String;
  loginSecret: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  middleName: () => Promise<String>;
  contactNumber: () => Promise<String>;
  loginSecret: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  middleName: () => Promise<AsyncIterator<String>>;
  contactNumber: () => Promise<AsyncIterator<String>>;
  loginSecret: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Asset",
    embedded: false
  },
  {
    name: "Tag",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
